<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sqx.dao.TeacherDao">
    
    <sql id="selectSql">select * from t_teacher</sql>

    
<!--    public Teacher getTeacherById(Integer id);-->
    <select id="getTeacherById" resultMap="teacherMap">
        <include refid="selectSql"></include>
         where id=#{id}
    </select>
    
    <resultMap id="teacherMap" type="com.sqx.bean.Teacher">
        <id property="id" column="id"/>
        <result property="address" column="address"/>
        <result property="birth" column="birth_date"/>
        <result property="course" column="class_name"/>
        <result property="name" column="teacherName"/>
    </resultMap>

    <!--if: 判断-->
<!--    public List<Teacher> getTeacherByCondition(Teacher teacher);-->
    <select id="getTeacherByCondition" resultMap="teacherMap">
        select  * from t_teacher
        <!-- where：可以帮我们取出掉前面and；-->


        <!-- trim：截取字符串
            prefix="" ： 前缀：为下面的sql整体添加一个前缀
            prefixOverrides=""： 去除整体字符串前面多余的字符
            suffix="" ：为下面的sql整体添加一个后缀
            suffixOverrides=""：去除整体字符串后面多余的字符
        -->
        <!--建议查询语句写在where标签中；每个and写在前面，where帮我们去除前面多余的and-->
        <trim prefix="where" prefixOverrides="and" suffixOverrides="and">
            <!--
            test="": 编写判断条件
            id!=null:取出传入的javaBean属性中的id的值，判断其是否为空
        -->
            <if test="id!=null">
                id > #{id}  and
            </if>
            <!--
                "空串"
                and:&&
                or:||
                if():传入非常强大的判断条件：OGNL表达式
            -->
            
            <!--绑定一个表达式的值到一个变量-->
--             <bind name="_name" value="%+name+%"/>
            <if test="name!=null and !name.equals(&quot;&quot;)">
                teacherName like #{_name} and
            </if>

            <if test="birth!=null">
                birth_date &lt; #{birth} and
            </if>
        </trim>

    </select>
    <!---->
<!--    public List<Teacher> getTeacherByIdIn(List<Integer> list);-->
    <select id="getTeacherByIdIn" resultMap="teacherMap">
        select * from t_teacher where id in
        <!--
            collection="":指定要遍历的集合的key
            close="":以什么结束
            index="":索引
                如果遍历一个list：
                    index：指定的变量保存了当前索引
                    item:就是保存当前变量的值
                如果遍历一个map：
                    index：指定的变量就是保存了一个当前遍历变量元素的key
                    item:就是保存当前变量的值
            item="":变量名：每次遍历出的元素起一个变量名方便引用
            open="":以什么开始
            separator=""：每次白能力元素的分隔符
        -->
        <if test="ids.size > 0">
            <foreach collection="ids" item="id_item"
                     separator="," open="(" close=")">
                #{id_item}
            </foreach>
        </if>

   </select>


<!--    public List<Teacher> getTeacherByConditionChoose(Teacher teacher);-->
    <select id="getTeacherByConditionChoose" resultMap="teacherMap">
        select  * from t_teacher
        <where>

            <!--分支选择-->
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="name!=null and !name.equals(&quot;&quot;)">
                    teacherName=#{name}
                </when>
                <when test="birth!=null">
                    birth_date = #{birth}
                </when>
                <otherwise>
                    1=1
                </otherwise>
            </choose>
        </where>
    </select>

<!--    public int updateTecher(Teacher teacher);-->
    <update id="updateTecher">
        UPDATE t_teacher
        <set>
            <if test="name!=null and !name.equals(&quot;&quot;)">
                teacherName = #{name},
            </if>
            <if test="course!=null and !course.equals(&quot;&quot;)">
                class_name = #{course},
            </if>
            <if test="address!=null and !address.equals(&quot;&quot;)">
                address = #{address},
            </if>

            <if test="birth!=null">
                birth_date = #{birth}
            </if>
        </set>

        <where>
            id=#{id}
        </where>
    </update>

    <!--
        OGNL:对象图导航语言 =====>其实就是级联属性
            Person
                ==lastName
                ==email
                ==Address
                    ==city
                    ==province
                    ==adminName
         方法、静态方法、构造器.xxx
         在mybatis中，传入的参数可以用来判断
         额外还有两个东西：
         _parameter:代表传入来的参数
            （1）传入单个参数：_parameter代表这个参数
            （2）传入多个参数：_parameter就代表多个参数集合起来的map
         _databaseId:代表当前环境
            如果是mysql，执行。。。如果是oracle执行。。。。
            不用再写
             <databaseIdProvider type="DB_VENDOR">
                <property name="MySQL" value="mysql"/>
             </databaseIdProvider>

                 <select id="getTeacherByConditionChoose" resultMap="teacherMap" databaseId="mysql">

    -->
</mapper>