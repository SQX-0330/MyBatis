<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--Spring希望管理所有的业务逻辑组件，等-->
    <context:component-scan base-package="com.sqx">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入数据库配置文件-->
    <context:property-placeholder location="classpath:dbconfig.properties"/>

    <!--Spring用来控制业务逻辑。数据源、事务控制、aop-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.jdbcurl}"/>
        <property name="driverClass" value="${jdbc.driverclass}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxPoolSize" value="20"/>
        <property name="minPoolSize" value="5"/>
    </bean>
    <!--spring管理事务-->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!--开启基于注解的事务-->
<!--    <tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>-->
    <aop:config>
        <aop:pointcut id="txPoint" expression="execution(* com.sqx.service.*.*(..))"/>
        <aop:advisor advice-ref="myTx" pointcut-ref="txPoint"/>
    </aop:config>

    <tx:advice id="myTx" transaction-manager="dataSourceTransactionManager">
        <tx:attributes>
            <tx:method name="*" rollback-for="java.lang.Exception"/>
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--
        整合mybatis
            目的：1、spring管理所有组件。mapper的实现类
                    service ==>Dao    @Aurowired:自动注入mapper
                 2、spring用来管理事务，spring声名式事务
    -->
    <!--创建出sqlSessionFactory对象-->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--configLocation指定全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--mapperLocations:指定mapper文件的位置-->
        <property name="mapperLocations" value="classpath:mybatis-mapper/EmployeeMapper.xml"/>
    </bean>

    <!--扫描所有的mapper接口的实现，让这些mapper能够自动注入
    base-package:指定mapper接口的包名
    -->
    <mybatis-spring:scan base-package="com.sqx.dao"/>
<!--    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
<!--        <property name="basePackage" value="com.sqx.dao"/>-->
<!--    </bean>-->
</beans>